#+TITLE: React
* Meta
** Benefits
- Elegant handling of rendering changes to the DOM
  - Automatically re-renders components whenever their props or state change
  - Only re-renders changed components
- Simple assignment of handlers
  - Pass them in as props to HTML elements (in JSX)
** Alternatives
- jQuery
- Vanilla Javascript
** Remember to
- Only return one HTML element (wrap everything in a ~<div>~)
- Bind all handlers to the context of ~this~
* Components
- All React components have a render method, which returns HTML
** Functional
- Has only an (implicit) render method
** Standard
- Has state (props)
- Has (explicit) render method
- May have other methods
* Practical
** Container components
- The point is to get info from state to feed to their children. They are the hunters. The lady lions.
- Contain
  - mapStateToProps
  - mapDispatchToProps
- Export the connection of the two, along with the standard component
- Any time you need things from state to feed children, containers are necessary
** Standard components
- They render things
- They can take lifecycle methods (like ~componentDidMount~)
** Item components
- You can further modularize things by creating smaller components to go in your main components.
- These will be functional
- When you're wondering what data can show up in their props, go back to their container component hunter lady lions
** Forms
- Editing will almost always have ~hasHistory.push()~
- Buttons have an ~onClick~
