#+TITLE: Redux
* Meta
- Node package that implements Flux
* Principles
1. Single source of truth
   - There is one single store (called the "state tree")
2. State is read-only
   - To change it, dispatch an action
   - Actions go one at a time, so this ensures single threading
3. Only pure functions (dispatch actions to) change state
   - Pure functions are known as "reducers".
     - They take
       - Previous state
       - Action
     - They return
       - New state
* Steps to Create
** Create ~package.json~
#+BEGIN_SRC bash
npm init -y
#+END_SRC
** Install packages
#+BEGIN_SRC bash
npm install --save webpack react react-dom redux react-redux babel-core babel-loader babel-preset-react babel-preset-es2015 lodash webpack-dev-server
#+END_SRC
** Create ~webpack.config.js~
#+BEGIN_SRC javascript
var path = require('path');

module.exports = {
  // TODO: Update entry to reflect correct .jsx file
  entry: './entry.jsx',
  output: {
    path: path.resolve(__dirname),
    filename: 'bundle.js',
  },
  module: {
    loaders: [
      {
        test: [/\.jsx?$/],
        exclude: /(node_modules)/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015', 'react']
        }
      }
    ]
  },
  devtool: 'source-map',
  resolve: {
    extensions: ['.js', '.jsx', '*']
  }
};
#+END_SRC
** Configure webpack dev server
Add the following to ~package.json~:

#+BEGIN_SRC javascript
"scripts": {
    "start": "webpack-dev-server --inline"
  }
#+END_SRC
** Add index page
- Make sure to include the bundle:
  ~<script src="./bundle.js"></script>~
- Make sure to include an entry point
  ~<div id="content"> React will take over. </div>~
** Add placeholder to entry file
#+BEGIN_SRC javascript
import React from "react";
import ReactDOM from "react-dom";

const App = () => (
  <div className="app">
    <h1>React is working</h1>
  </div>
);

document.addEventListener('DOMContentLoaded', () => {
  const root = document.getElementById('content');
  ReactDOM.render(<App />, root);
});
#+END_SRC
** Run ~npm start~
* Redux Cycle
** API Utils
- Ajax calls needed for action creators
** Action creators
*** Flow
1. Create thunk action creators
2. These will require regular action creators
3. These will require exported constants
*** Thunk
- exported
- rely on regular
**** Note
- Anything that requires udating will need a ~hashHistory.push()~ ie a redirect
*** Regular
- type IN_ALL_CAPS
- data
** Reducers
*** General
- They change the state of the application
- To have more modular code, write multiple reducers and combine them in a 'root reducer', whose sole job is to join reducers. This is necessary because the store can only take one reducer.
- They have a switch statement
- don't forget that the actions in each case depend on what is send by the action creator
- And easy approach
  - Set the default first
  - Set the object to initialize to
*** Remember that
- receiving all replaces the state
- receiving new joins with the old state
- deleting requires copying the state than deleting from it
** Store
- Create the store from
  - Root reducer
  - Preloaded state
  - Middleware
  - Mnemonic: a store is a middleman loaded with roots
